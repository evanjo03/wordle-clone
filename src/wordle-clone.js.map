{"version":3,"file":"wordle-clone.js","sourceRoot":"","sources":["wordle-clone.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAoB,MAAM,KAAK,CAAC;AAC9D,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AACpD,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAExC,MAAM,OAAO,WAAY,SAAQ,UAAU;IAA3C;;QAS8B,UAAK,GAAG,WAAW,CAAC;QAIpB,YAAO,GAAG,CAAC,CAAC;IA0D1C,CAAC;IAtDC,IAAI,UAAU;;QACZ,OAAO,CAAA,MAAA,IAAI,CAAC,UAAU,0CAAE,MAAM,MAAK,CAAC,CAAC;IACvC,CAAC;IAES,YAAY,CACpB,kBAAqE;QAErE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,QAAQ;QACpB,IAAI,CAAC,YAAY,GAAG,MAAM,OAAO,EAAE,CAAC;IACtC,CAAC;IAED,MAAM;;QACJ,OAAO,IAAI,CAAA;aACF,IAAI,CAAC,YAAY;;;oBAGV,MAAA,IAAI,CAAC,UAAU,mCAAI,EAAE;;;;oBAIrB,IAAI,CAAC,gBAAgB;oBACrB,IAAI,CAAC,gBAAgB;;;;oBAIrB,IAAI,CAAC,gBAAgB;uBAClB,CAAC,IAAI,CAAC,UAAU;;;;;KAKlC,CAAC;IACJ,CAAC;IAEO,gBAAgB,CAAC,CAAQ;QAC/B,MAAM,YAAY,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAqB,CAAC;QAC7D,IAAI,CAAC,UAAU,GAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,KAAK,CAAC;IACxC,CAAC;IAEO,gBAAgB;QACtB,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEO,gBAAgB,CAAC,CAAgB;QACvC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,OAAO,IAAI,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU;YAAE,OAAO;QACzE,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEO,SAAS;QACf,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC;;AArEM,kBAAM,GAAG,GAAG,CAAA;;;;;;GAMlB,CAAC;AAE0B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0CAAqB;AAEpB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;iDAAsB;AAErB;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4CAAa;AAE/B;IAAR,KAAK,EAAE;+CAA4B","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { html, css, LitElement, PropertyValueMap } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { getWord } from './get-word.js';\n\nexport class WordleClone extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n      padding: 25px;\n      color: var(--wordle-clone-text-color, #000);\n    }\n  `;\n\n  @property({ type: String }) title = 'Hey there';\n\n  @property({ type: String }) selectedWord: string;\n\n  @property({ type: Number }) counter = 5;\n\n  @state() private guessValue: string;\n\n  get validGuess(): boolean {\n    return this.guessValue?.length === 5;\n  }\n\n  protected firstUpdated(\n    _changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n  ): void {\n    this.initData();\n  }\n\n  private async initData() {\n    this.selectedWord = await getWord();\n  }\n\n  render() {\n    return html`\n      <div>${this.selectedWord}</div>\n      <fieldset>\n        <input\n          .value=\"${this.guessValue ?? ''}\"\n          id=\"guess\"\n          placeholder=\"Guess...\"\n          onkeydown=\"return /[a-z]/i.test(event.key)\"\n          @keyup=\"${this.handleGuessKeyup}\"\n          @input=\"${this.handleGuessInput}\"\n          maxlength=\"5\"\n        />\n        <button\n          @click=\"${this.handleGuessClick}\"\n          ?disabled=\"${!this.validGuess}\"\n        >\n          Guess\n        </button>\n      </fieldset>\n    `;\n  }\n\n  private handleGuessInput(e: Event): void {\n    const inputElement = e.composedPath()[0] as HTMLInputElement;\n    this.guessValue = inputElement?.value;\n  }\n\n  private handleGuessClick(): void {\n    this.makeGuess();\n  }\n\n  private handleGuessKeyup(e: KeyboardEvent): void {\n    if (!(e.key === 'Enter' || e.keyCode === 13) || !this.validGuess) return;\n    this.makeGuess();\n  }\n\n  private makeGuess(): void {\n    console.log(this.guessValue);\n  }\n}\n"]}